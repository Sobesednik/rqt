{"version":3,"sources":["../../src/lib/index.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG;;;;;;;;;;;;AAYzB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClD,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAClD,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAClC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ;EACvC,CAAC;;EAED,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACV,MAAM,CAAC;AACT;;;;;;;;;;;;AAYA,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClD,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAClD,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAClC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ;EACvC,CAAC;;EAED,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACV,MAAM,CAAC;AACT;;;;;;;;;;;;AAYA,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7C,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC,CAAC,CAAC,OAAO;IACV,MAAM,CAAC,CAAC,IAAI;EACd;EACA,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;;EAEtC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACV,MAAM,CAAC;AACT;;;;;;;;;;;;AAYA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7C,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC;;;;AAInC","file":"lib/index.js","sourcesContent":["import aqt from '@rqt/aqt'\n\n/**\n * Request an HTTP page and return the response body as a string.\n * @param {string} address Url such as http://example.com/api.\n * @param {Options} [options] Options for requests.\n * @param {*} [options.data] Optional data to send to the server with the request.\n * @param {'form'|'json'} [options.type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @param {OutgoingHttpHeaders} [options.headers] Headers to use for the request.\n * @param {boolean} [options.compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @param {string} [options.method=\"POST\"] What HTTP method to use to send data. Default `POST`.\n */\nexport const rqt = async (address, options = {}) => {\n  const { data, type, headers, method, compress } = options\n  const { body } = await aqt(address, {\n    data, type, headers, method, compress,\n  })\n  /** @type {string} */\n  const r = body\n  return r\n}\n\n/**\n * Request an HTTP page and return the response body as an object.\n * @param {string} address Url such as http://example.com/api.\n * @param {Options} [options] Options for requests.\n * @param {*} [options.data] Optional data to send to the server with the request.\n * @param {'form'|'json'} [options.type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @param {OutgoingHttpHeaders} [options.headers] Headers to use for the request.\n * @param {boolean} [options.compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @param {string} [options.method=\"POST\"] What HTTP method to use to send data. Default `POST`.\n */\nexport const jqt = async (address, options = {}) => {\n  const { data, type, headers, method, compress } = options\n  const { body } = await aqt(address, {\n    data, type, headers, method, compress,\n  })\n  /** @type {*} */\n  const r = body\n  return r\n}\n\n/**\n * Request a page and return the body as a buffer.\n * @param {string} address The URL such as http://example.com/api.\n * @param {Options} [options] Options for requests.\n * @param {*} [options.data] Optional data to send to the server with the request.\n * @param {'form'|'json'} [options.type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @param {OutgoingHttpHeaders} [options.headers] Headers to use for the request.\n * @param {boolean} [options.compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @param {string} [options.method=\"POST\"] What HTTP method to use to send data. Default `POST`.\n */\nexport const bqt = async (address, options) => {\n  const c = {\n    ...options,\n    binary: true,\n  }\n  const  { body } = await aqt(address, c)\n  /** @type {Buffer} */\n  const r = body\n  return r\n}\n\n/**\n * Request a page and return the body as a stream.\n * @param {string} address Url such as http://example.com/api\n * @param {Options} [config] Options for requests.\n * @param {*} [config.data] Optional data to send to the server with the request.\n * @param {'form'|'json'} [config.type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @param {OutgoingHttpHeaders} [config.headers] Headers to use for the request.\n * @param {boolean} [config.compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @param {string} [config.method=\"POST\"] What HTTP method to use to send data. Default `POST`.\n */\nexport const srqt = async (address, config) => {\n  throw new Error('not implemented')\n  // config.binary = true\n  // const  { body } = await arqt(address, config)\n  // return body\n}\n\n/* documentary types/options.xml */\n/**\n * @typedef {import('http').OutgoingHttpHeaders} OutgoingHttpHeaders\n *\n * @typedef {Object} Options Options for requests.\n * @prop {*} [data] Optional data to send to the server with the request.\n * @prop {'form'|'json'} [type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @prop {OutgoingHttpHeaders} [headers] Headers to use for the request.\n * @prop {boolean} [compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @prop {string} [method=\"POST\"] What HTTP method to use to send data. Default `POST`.\n */\n"]}