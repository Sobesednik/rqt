{"version":3,"sources":["../../src/lib/Session.js"],"names":[],"mappings":"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","file":"lib/Session.js","sourcesContent":["import aqt from '@rqt/aqt'\n\n/**\n * An instance of a session class can maintain cookies.\n */\nexport default class Session {\n  /**\n   * Create a new session that can be used to make requests in sequence, and remember cookies.\n   * @param {SessionOptions} options Options for a session.\n * @param {string} [options.host] The prefix to each request, such as `https://rqt.biz`.\n * @param {OutgoingHttpHeaders} [options.headers] Headers to use for each request.\n   */\n  constructor(options = {}) {\n    const {\n      host,\n      headers = {},\n    } = options\n\n    this.host = host\n    this.headers = headers\n    this.cookies = {}\n  }\n  /**\n   * Make a request and return the body.\n   * @param {string} location The URL to which to make a request.\n   * @param {Options} options Options for requests.\n * @param {*} [options.data] Optional data to send to the server with the request.\n * @param {'form'|'json'} [options.type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @param {OutgoingHttpHeaders} [options.headers] Headers to use for the request.\n * @param {boolean} [options.compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @param {string} [options.method=\"POST\"] What HTTP method to use to send data. Default `POST`.\n   */\n  async rqt(location, options = {}) {\n    const { body } = await this._request(location, options)\n    /** @type {string} */\n    const r = body\n    return r\n  }\n  /**\n   * Make a request and return the body as buffer.\n   * @param {string} location The URL to which to make a request.\n   * @param {Options} options Options for requests.\n * @param {*} [options.data] Optional data to send to the server with the request.\n * @param {'form'|'json'} [options.type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @param {OutgoingHttpHeaders} [options.headers] Headers to use for the request.\n * @param {boolean} [options.compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @param {string} [options.method=\"POST\"] What HTTP method to use to send data. Default `POST`.\n   */\n  async bqt(location, options = {}) {\n    const { body } = await this._request(location, {\n      ...options,\n      binary: true,\n    })\n    /** @type {Buffer} */\n    const r = body\n    return r\n  }\n  /**\n   * Make a request and return the parsed JSON body as an object.\n   * @param {string} location The URL to which to make a request.\n   * @param {Options} options Options for requests.\n * @param {*} [options.data] Optional data to send to the server with the request.\n * @param {'form'|'json'} [options.type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @param {OutgoingHttpHeaders} [options.headers] Headers to use for the request.\n * @param {boolean} [options.compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @param {string} [options.method=\"POST\"] What HTTP method to use to send data. Default `POST`.\n   */\n  async jqt(location, options = {}) {\n    const { body } = await this._request(location, options)\n    /** @type {Object} */\n    const r = body\n    return r\n  }\n  getFullUrl(location) {\n    if (this.host) {\n      return `${this.host}${location}`\n    }\n    return location\n  }\n  /**\n   * Make a request and return the body, headers and status.\n   * @param {string} location The URL to which to make a request.\n   * @param {AqtOptions} options Configuration for requests.\n * @param {Object} options.data Optional data to send to the server with the request.\n * @param {'form'|'json'} [options.type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @param {OutgoingHttpHeaders} [options.headers] Headers to use for the request.\n * @param {boolean} [options.compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @param {string} [options.headers=\"POST\"] What HTTP method to use to send data. Default `POST`.\n * @param {boolean} [options.binary=false] Whether to return a buffer instead of a string. Default `false`.\n * @param {boolean} [options.justHeaders=false] Whether to stop the request after response headers were received, without waiting for the data. Default `false`.\n   */\n  async aqt(location, options = {}) {\n    const res = await this._request(location, options)\n    return res\n  }\n  async _request(location, options = {}) {\n    const loc = this.getFullUrl(location)\n    const opts = getAllOptions(this.headers, options, this.Cookie)\n    const res = await aqt(loc, opts)\n    const { headers } = res\n    this.cookies = updateCookies(this.cookies, headers)\n    return res\n  }\n  get Cookie() {\n    return getCookieHeader(this.cookies)\n  }\n}\n\nconst getAllOptions = (sessionHeaders, options, Cookie) => {\n  const {\n    headers = {},\n    ...opts\n  } = options\n  return {\n    ...opts,\n    headers: {\n      ...sessionHeaders,\n      ...headers,\n      Cookie,\n    },\n  }\n}\n\nconst getCookieHeader = (cookies) => {\n  const r = Object.keys(cookies).reduce((acc, key) => {\n    const val = cookies[key]\n    const s = `${key}=${val}`\n    return [...acc, s]\n  }, [])\n  return r.join('; ')\n}\n\n/**\n * @param {Object} cookies\n * @param {import('http').IncomingHttpHeaders} headers\n */\nconst updateCookies = (cookies, headers) => {\n  const newCookies = extractCookies(headers)\n  const r = {\n    ...cookies,\n    ...newCookies,\n  }\n  const res = Object.keys(r).reduce((acc, current) => {\n    const val = r[current]\n    if (!val) return acc\n    return {\n      ...acc,\n      [current]: val,\n    }\n  }, {})\n  return res\n}\n\nconst extractCookie = c => {\n  const res = /^(.+?)=(.*?);/.exec(c)\n  if (!res) throw new Error(`Could not extract a cookie from ${c}`)\n  const [, name, value] = res\n  return {\n    [name]: value,\n  }\n}\nconst extractCookies = ({ 'set-cookie': setCookie = [] } = {}) => {\n  return setCookie.reduce((acc, current) => {\n    const c = extractCookie(current)\n    return {\n      ...acc,\n      ...c,\n    }\n  }, {})\n}\n\n/**\n * @typedef {Object} SessionOptions\n * @prop {OutgoingHttpHeaders} [headers] Headers to send with each request.\n */\n\n/* documentary types/options.xml */\n/**\n * @typedef {import('http').OutgoingHttpHeaders} OutgoingHttpHeaders\n *\n * @typedef {Object} Options Options for requests.\n * @prop {*} [data] Optional data to send to the server with the request.\n * @prop {'form'|'json'} [type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @prop {OutgoingHttpHeaders} [headers] Headers to use for the request.\n * @prop {boolean} [compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @prop {string} [method=\"POST\"] What HTTP method to use to send data. Default `POST`.\n */\n\n/* documentary types/session.xml */\n/**\n * @typedef {Object} SessionOptions Options for a session.\n * @prop {string} [host] The prefix to each request, such as `https://rqt.biz`.\n * @prop {OutgoingHttpHeaders} [headers] Headers to use for each request.\n */\n\n/* documentary node_modules/@rqt/aqt/types/index.xml */\n/**\n * @typedef {import('http').OutgoingHttpHeaders} OutgoingHttpHeaders\n *\n * @typedef {Object} AqtOptions Configuration for requests.\n * @prop {Object} data Optional data to send to the server with the request.\n * @prop {'form'|'json'} [type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @prop {OutgoingHttpHeaders} [headers] Headers to use for the request.\n * @prop {boolean} [compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @prop {string} [headers=\"POST\"] What HTTP method to use to send data. Default `POST`.\n * @prop {boolean} [binary=false] Whether to return a buffer instead of a string. Default `false`.\n * @prop {boolean} [justHeaders=false] Whether to stop the request after response headers were received, without waiting for the data. Default `false`.\n */\n"]}