{"version":3,"sources":["../src/index.js"],"names":["rqt","address","config","data","type","headers","version","binary","returnHeaders","method","er","hostname","protocol","port","path","isHttps","request","https","http","options","d","contentType","JSON","stringify","Buffer","byteLength","h","body","Promise","resolve","reject","req","rs","promise","Catchment","response","startsWith","parsed","parse","e","err","on","error","write","end"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AA+FA;;;;AA7FA;;;;;;;;;;;;AAYe,eAAeA,GAAf,CAAmBC,OAAnB,EAA4BC,SAAS,EAArC,EAAyC;AACtD,QAAM;AACJC,QADI;AAEJC,WAAO,MAFH;AAGJC,cAAU;AACR,oBAAe,6BAA4BC,gBAAQ;AAD3C,KAHN;AAMJC,aAAS,KANL;AAOJC,oBAAgB,KAPZ;AAQJC,aAAS;AARL,MASFP,MATJ;AAUA,QAAMQ,KAAK,qBAAO,IAAP,CAAX;AAEA,QAAM;AAAEC,YAAF;AAAYC,YAAZ;AAAsBC,QAAtB;AAA4BC;AAA5B,MAAqC,gBAAMb,OAAN,CAA3C;AACA,QAAMc,UAAUH,aAAa,QAA7B;AACA,QAAMI,UAAUD,UAAUE,cAAV,GAAkBC,aAAlC;AAEA,QAAMC,UAAU;AACdR,YADc;AAEdE,QAFc;AAGdC,QAHc;AAIdT;AAJc,GAAhB;AAOA,MAAIe,IAAIjB,IAAR;;AAEA,MAAIiB,CAAJ,EAAO;AACL,QAAIC,WAAJ;;AACA,YAAQjB,IAAR;AACA,WAAK,MAAL;AACEgB,YAAIE,KAAKC,SAAL,CAAepB,IAAf,CAAJ;AACAkB,sBAAc,kBAAd;AACA;;AACF,WAAK,MAAL;AACED,YAAI,sBAAYjB,IAAZ,CAAJ;AACAkB,sBAAc,mCAAd;AACA;AARF;;AAWAF,YAAQV,MAAR,GAAiBA,MAAjB;AACAU,YAAQd,OAAR,CAAgB,cAAhB,IAAkCgB,WAAlC;AACAF,YAAQd,OAAR,CAAgB,gBAAhB,IAAoCmB,OAAOC,UAAP,CAAkBL,CAAlB,CAApC;AACD;;AAED,MAAIM,CAAJ;AACA,QAAMC,OAAO,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAClD,UAAMC,MAAMf,QACVG,OADU,EAEV,MAAOa,EAAP,IAAc;AACZ,OAAC;AAAE3B,iBAASqB;AAAX,UAAiBM,EAAlB;AACA,YAAM;AAAEC;AAAF,UAAc,IAAIC,kBAAJ,CAAc;AAAEF,UAAF;AAAMzB;AAAN,OAAd,CAApB;AACA,YAAM4B,WAAW,MAAMF,OAAvB;;AACA,UAAIP,EAAE,cAAF,EAAkBU,UAAlB,CAA6B,kBAA7B,CAAJ,EAAsD;AACpD,YAAI;AACF,gBAAMC,SAASf,KAAKgB,KAAL,CAAWH,QAAX,CAAf;AACAN,kBAAQQ,MAAR;AACD,SAHD,CAGE,OAAOE,CAAP,EAAU;AACV,gBAAMC,MAAM9B,GAAG6B,CAAH,CAAZ;AACAC,cAAIL,QAAJ,GAAeA,QAAf;AACAL,iBAAOU,GAAP;AACD;AACF,OATD,MASO;AACLX,gBAAQM,QAAR;AACD;AACF,KAlBS,EAmBVM,EAnBU,CAoBV,OApBU,EAqBTC,KAAD,IAAW;AACT,YAAMF,MAAM9B,GAAGgC,KAAH,CAAZ;AACAZ,aAAOU,GAAP;AACD,KAxBS,CAAZ;;AA0BA,QAAIpB,CAAJ,EAAO;AACLW,UAAIY,KAAJ,CAAUvB,CAAV;AACD;;AACDW,QAAIa,GAAJ;AACD,GA/BkB,CAAnB;AAgCA,MAAIpC,aAAJ,EAAmB,OAAO;AAAEmB,QAAF;AAAQtB,aAASqB;AAAjB,GAAP;AACnB,SAAOC,IAAP;AACD;AAID","sourcesContent":["import { request as http } from 'http'\nimport { request as https } from 'https'\nimport Catchment from 'catchment'\nimport { parse } from 'url'\nimport erotic from 'erotic'\nimport { getFormData } from './lib'\nimport { version } from '../package.json'\n\n/**\n * Request an HTTP page. If `returnHeaders` is set to true, an object will be returned.\n * @param {string} address Url such as http://example.com/api\n * @param {Config} [config] Configuration object\n * @param {object} [config.data] Data to send to the server using a post request.\n * @param {object} [config.headers] A map of headers to use in the request.\n * @param {boolean} [config.binary] Whether to return a buffer. Default false.\n * @param {boolean} [config.returnHeaders] Return an object with `body` and `headers` properties instead of just the response.\n * @param {'form'|'json'} [config.type=json] How to send data: `form` for url-encoded transmission and `json` to serialise JSON data. `json` mode by default.\n * @param {string} [config.method] What method to use to send data (only works when `data` is set). Default `POST`.\n * @returns {Promise.<string|Buffer|{ body: string|Buffer, headers: Object.<string, string> }>} A string or buffer as a response. If `config.headers` was set, an object is returned.\n */\nexport default async function rqt(address, config = {}) {\n  const {\n    data,\n    type = 'json',\n    headers = {\n      'User-Agent': `Mozilla/5.0 (Node.js) rqt/${version}`,\n    },\n    binary = false,\n    returnHeaders = false,\n    method = 'POST',\n  } = config\n  const er = erotic(true)\n\n  const { hostname, protocol, port, path } = parse(address)\n  const isHttps = protocol === 'https:'\n  const request = isHttps ? https : http\n\n  const options = {\n    hostname,\n    port,\n    path,\n    headers,\n  }\n\n  let d = data\n\n  if (d) {\n    let contentType\n    switch (type) {\n    case 'json':\n      d = JSON.stringify(data)\n      contentType = 'application/json'\n      break\n    case 'form':\n      d = getFormData(data)\n      contentType = 'application/x-www-form-urlencoded'\n      break\n    }\n\n    options.method = method\n    options.headers['Content-Type'] = contentType\n    options.headers['Content-Length'] = Buffer.byteLength(d)\n  }\n\n  let h\n  const body = await new Promise((resolve, reject) => {\n    const req = request(\n      options,\n      async (rs) => {\n        ({ headers: h } = rs)\n        const { promise } = new Catchment({ rs, binary })\n        const response = await promise\n        if (h['content-type'].startsWith('application/json')) {\n          try {\n            const parsed = JSON.parse(response)\n            resolve(parsed)\n          } catch (e) {\n            const err = er(e)\n            err.response = response\n            reject(err)\n          }\n        } else {\n          resolve(response)\n        }\n      },\n    ).on(\n      'error',\n      (error) => {\n        const err = er(error)\n        reject(err)\n      },\n    )\n    if (d) {\n      req.write(d)\n    }\n    req.end()\n  })\n  if (returnHeaders) return { body, headers: h }\n  return body\n}\n\nexport { default as Session } from './session'\n\n/**\n * @typedef {Object} Config\n * @property {object} [data] Data to send to the server.\n * @property {object} [headers] A map of headers.\n * @property {boolean} [binary] Whether to return a buffer.\n * @property {boolean} [returnHeaders] Return an object with `body` and `headers` properties instead of just the response.\n * @property {'form'|'json'} [type] How to send data: `form` for url-encoded transmission and `json` to serialise JSON data.\n * @param {string} [method=POST] What method to use to send data (only works when `data` is set). Default `POST`.\n */\n"],"file":"index.js"}